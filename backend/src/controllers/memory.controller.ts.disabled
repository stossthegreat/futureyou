import { FastifyInstance } from "fastify";
import { memoryService } from "../services/memory.service";

function getUserIdOr401(req: any) {
  const uid = req?.user?.id || req.headers["x-user-id"];
  if (!uid || typeof uid !== "string") {
    const err: any = new Error("Unauthorized: missing user id");
    err.statusCode = 401;
    throw err;
  }
  return uid;
}

export async function memoryController(fastify: FastifyInstance) {
  fastify.get("/api/v1/memory", async (req: any, reply) => {
    try {
      const userId = getUserIdOr401(req);
      return await memoryService.getFacts(userId);
    } catch (err: any) {
      const code = err.statusCode || 500;
      return reply.code(code).send({ error: err.message });
    }
  });

  fastify.post("/api/v1/memory", async (req: any, reply) => {
    try {
      const userId = getUserIdOr401(req);
      const { key, value } = req.body as { key: string; value: any };
      if (!key) return reply.code(400).send({ error: "key is required" });
      return await memoryService.updateFact(userId, key, value);
    } catch (err: any) {
      const code = err.statusCode || 500;
      return reply.code(code).send({ error: err.message });
    }
  });
}
